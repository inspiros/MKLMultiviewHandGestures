from params import Params
from sklearn.metrics import pairwise

DATASET_ROOT = '/media/inspiros/Shared/datasets/MultiviewGesture/'
LAYER = 'fc6'

# Put every configurations here!
'''
Linear config
'''
# linear_params = Params(name='linear',
#                        assignable_names=['lin', 'linear'],
#                        kinects=['K1', 'K2', 'K3', 'K4', 'K5'],
#                        kernel_func_rgb=lambda X, L=None: pairwise.linear_kernel(X, L),
#                        kernel_func_depth=lambda X, L=None: pairwise.linear_kernel(X, L),
#                        kernel_func_concatenate=lambda X, L=None: pairwise.linear_kernel(X, L),
#                        C_mkl=0.0001,
#                        C_concatenate=100,
#                        lam_mkl=0.0,
#                        late_fusion_weight_rgb=0.8,
#                        late_fusion_weight_depth=0.2
#                        )

linear_params_K1 = Params(name='linear',
                          assignable_names=['lin', 'linear'],
                          kinects=['K1'],
                          kernel_func_mkl_rgb=lambda X, L=None: pairwise.linear_kernel(X, L),
                          kernel_func_mkl_of=lambda X, L=None: pairwise.linear_kernel(X, L),
                          kernel_func_mkl_depth=lambda X, L=None: pairwise.linear_kernel(X, L),
                          kernel_func_concatenate=lambda X, L=None: pairwise.linear_kernel(X, L),
                          C_mkl=0.000075,
                          C_concatenate=100,
                          C_rgb=0.0001,
                          C_of=0.0001,
                          C_depth=0.0001,
                          lam_mkl=0.6,
                          )
linear_params_K2 = Params(name='linear',
                          assignable_names=['lin', 'linear'],
                          kinects=['K2'],
                          kernel_func_mkl_rgb=lambda X, L=None: pairwise.linear_kernel(X, L),
                          kernel_func_mkl_of=lambda X, L=None: pairwise.linear_kernel(X, L),
                          kernel_func_mkl_depth=lambda X, L=None: pairwise.linear_kernel(X, L),
                          kernel_func_concatenate=lambda X, L=None: pairwise.linear_kernel(X, L),
                          C_mkl=0.001,
                          C_concatenate=100,
                          C_rgb=0.0001,
                          C_of=0.0001,
                          C_depth=0.0001,
                          lam_mkl=0.0,
                          )
linear_params_K3 = Params(name='linear',
                          assignable_names=['lin', 'linear'],
                          kinects=['K3'],
                          kernel_func_mkl_rgb=lambda X, L=None: pairwise.linear_kernel(X, L),
                          kernel_func_mkl_of=lambda X, L=None: pairwise.linear_kernel(X, L),
                          kernel_func_mkl_depth=lambda X, L=None: pairwise.linear_kernel(X, L),
                          kernel_func_concatenate=lambda X, L=None: pairwise.linear_kernel(X, L),
                          C_mkl=0.0001,
                          C_concatenate=100,
                          C_rgb=0.0001,
                          C_of=0.0001,
                          C_depth=0.0001,
                          lam_mkl=0.0,
                          )
linear_params_K4 = Params(name='linear',
                          assignable_names=['lin', 'linear'],
                          kinects=['K4'],
                          kernel_func_mkl_rgb=lambda X, L=None: pairwise.linear_kernel(X, L),
                          kernel_func_mkl_of=lambda X, L=None: pairwise.linear_kernel(X, L),
                          kernel_func_mkl_depth=lambda X, L=None: pairwise.linear_kernel(X, L),
                          kernel_func_concatenate=lambda X, L=None: pairwise.linear_kernel(X, L),
                          C_mkl=0.0001,
                          C_concatenate=100,
                          C_rgb=0.0001,
                          C_of=0.0001,
                          C_depth=0.0001,
                          lam_mkl=0.0,
                          )
linear_params_K5 = Params(name='linear',
                          assignable_names=['lin', 'linear'],
                          kinects=['K5'],
                          kernel_func_mkl_rgb=lambda X, L=None: pairwise.linear_kernel(X, L),
                          kernel_func_mkl_of=lambda X, L=None: pairwise.linear_kernel(X, L),
                          kernel_func_mkl_depth=lambda X, L=None: pairwise.linear_kernel(X, L),
                          kernel_func_concatenate=lambda X, L=None: pairwise.linear_kernel(X, L),
                          C_mkl=0.05,
                          C_concatenate=100,
                          C_rgb=0.0001,
                          C_of=0.0001,
                          C_depth=0.0001,
                          lam_mkl=0.8,
                          )
'''
RBF config
'''
# rbf_params = Params(name='rbf',
#                     assignable_names=['rbf', 'gaussian'],
#                     kinects=['K1', 'K2', 'K3', 'K4', 'K5'],
#                     kernel_func_rgb=lambda X, L=None: pairwise.rbf_kernel(X, L, gamma=0.000001),
#                     kernel_func_depth=lambda X, L=None: pairwise.rbf_kernel(X, L, gamma=0.000001),
#                     kernel_func_concatenate=lambda X, L=None: pairwise.rbf_kernel(X, L, gamma=0.1),
#                     C_mkl=100,
#                     C_concatenate=100,
#                     lam_mkl=1.0,
#                     late_fusion_weight_rgb=0.8,
#                     late_fusion_weight_depth=0.2
#                     )
rbf_params_K1 = Params(name='rbf',
                       assignable_names=['rbf', 'gaussian'],
                       kinects=['K1'],
                       kernel_func_mkl_rgb=lambda X, L=None: pairwise.rbf_kernel(X, L, gamma=0.000001),
                       kernel_func_mkl_of=lambda X, L=None: pairwise.rbf_kernel(X, L, gamma=0.000001),
                       kernel_func_mkl_depth=lambda X, L=None: pairwise.rbf_kernel(X, L, gamma=0.00000075),
                       kernel_func_concatenate=lambda X, L=None: pairwise.rbf_kernel(X, L, gamma=0.1),
                       kernel_func_svm_rgb=lambda X, L=None: pairwise.rbf_kernel(X, L, gamma=0.000001),
                       kernel_func_svm_of=lambda X, L=None: pairwise.rbf_kernel(X, L, gamma=0.000001),
                       kernel_func_svm_depth=lambda X, L=None: pairwise.rbf_kernel(X, L, gamma=0.000001),
                       C_mkl=100,
                       C_concatenate=100,
                       C_rgb=100,
                       C_of=100,
                       C_depth=100,
                       lam_mkl=1.0,
                       )
rbf_params_K2 = Params(name='rbf',
                       assignable_names=['rbf', 'gaussian'],
                       kinects=['K2'],
                       kernel_func_mkl_rgb=lambda X, L=None: pairwise.rbf_kernel(X, L, gamma=0.00001),
                       kernel_func_mkl_of=lambda X, L=None: pairwise.rbf_kernel(X, L, gamma=0.000001),
                       kernel_func_mkl_depth=lambda X, L=None: pairwise.rbf_kernel(X, L, gamma=0.000005),
                       kernel_func_concatenate=lambda X, L=None: pairwise.rbf_kernel(X, L, gamma=0.1),
                       kernel_func_svm_rgb=lambda X, L=None: pairwise.rbf_kernel(X, L, gamma=0.000001),
                       kernel_func_svm_of=lambda X, L=None: pairwise.rbf_kernel(X, L, gamma=0.000001),
                       kernel_func_svm_depth=lambda X, L=None: pairwise.rbf_kernel(X, L, gamma=0.000001),
                       C_mkl=100,
                       C_concatenate=100,
                       C_rgb=100,
                       C_of=100,
                       C_depth=100,
                       lam_mkl=1.0,
                       )
rbf_params_K3 = Params(name='rbf',
                       assignable_names=['rbf', 'gaussian'],
                       kinects=['K3'],
                       kernel_func_mkl_rgb=lambda X, L=None: pairwise.rbf_kernel(X, L, gamma=0.000001),
                       kernel_func_mkl_of=lambda X, L=None: pairwise.rbf_kernel(X, L, gamma=0.000001),
                       kernel_func_mkl_depth=lambda X, L=None: pairwise.rbf_kernel(X, L, gamma=0.00000001),
                       kernel_func_concatenate=lambda X, L=None: pairwise.rbf_kernel(X, L, gamma=0.1),
                       kernel_func_svm_rgb=lambda X, L=None: pairwise.rbf_kernel(X, L, gamma=0.000001),
                       kernel_func_svm_of=lambda X, L=None: pairwise.rbf_kernel(X, L, gamma=0.000001),
                       kernel_func_svm_depth=lambda X, L=None: pairwise.rbf_kernel(X, L, gamma=0.000001),
                       C_mkl=100,
                       C_concatenate=100,
                       C_rgb=100,
                       C_of=100,
                       C_depth=100,
                       lam_mkl=1.0,
                       )
rbf_params_K4 = Params(name='rbf',
                       assignable_names=['rbf', 'gaussian'],
                       kinects=['K4'],
                       kernel_func_mkl_rgb=lambda X, L=None: pairwise.rbf_kernel(X, L, gamma=0.0001),
                       kernel_func_mkl_of=lambda X, L=None: pairwise.rbf_kernel(X, L, gamma=0.0001),
                       kernel_func_mkl_depth=lambda X, L=None: pairwise.rbf_kernel(X, L, gamma=0.000075),
                       kernel_func_concatenate=lambda X, L=None: pairwise.rbf_kernel(X, L, gamma=0.1),
                       kernel_func_svm_rgb=lambda X, L=None: pairwise.rbf_kernel(X, L, gamma=0.000001),
                       kernel_func_svm_of=lambda X, L=None: pairwise.rbf_kernel(X, L, gamma=0.000001),
                       kernel_func_svm_depth=lambda X, L=None: pairwise.rbf_kernel(X, L, gamma=0.000001),
                       C_mkl=100,
                       C_concatenate=100,
                       C_rgb=100,
                       C_of=100,
                       C_depth=100,
                       lam_mkl=1.0,
                       )
rbf_params_K5 = Params(name='rbf',
                       assignable_names=['rbf', 'gaussian'],
                       kinects=['K5'],
                       kernel_func_mkl_rgb=lambda X, L=None: pairwise.rbf_kernel(X, L, gamma=0.0001),
                       kernel_func_mkl_of=lambda X, L=None: pairwise.rbf_kernel(X, L, gamma=0.0001),
                       kernel_func_mkl_depth=lambda X, L=None: pairwise.rbf_kernel(X, L, gamma=0.0001),
                       kernel_func_concatenate=lambda X, L=None: pairwise.rbf_kernel(X, L, gamma=0.1),
                       kernel_func_svm_rgb=lambda X, L=None: pairwise.rbf_kernel(X, L, gamma=0.000001),
                       kernel_func_svm_of=lambda X, L=None: pairwise.rbf_kernel(X, L, gamma=0.000001),
                       kernel_func_svm_depth=lambda X, L=None: pairwise.rbf_kernel(X, L, gamma=0.000001),
                       C_mkl=100,
                       C_concatenate=100,
                       C_rgb=100,
                       C_of=100,
                       C_depth=100,
                       lam_mkl=1.0,
                       )

'''
Laplacian config
'''
# laplacian_params = Params(name='laplacian',
#                           assignable_names=['lap', 'laplacian'],
#                           kinects=['K1', 'K2', 'K3', 'K4', 'K5'],
#                           kernel_func_rgb=lambda X, L=None: pairwise.laplacian_kernel(X, L, gamma=0.00001),
#                           kernel_func_depth=lambda X, L=None: pairwise.laplacian_kernel(X, L, gamma=0.00001),
#                           kernel_func_concatenate=lambda X, L=None: pairwise.laplacian_kernel(X, L, gamma=0.001),
#                           C_mkl=100,
#                           C_concatenate=100,
#                           lam_mkl=0.5,
#                           late_fusion_weight_rgb=0.8,
#                           late_fusion_weight_depth=0.2
#                           )

laplacian_params_K1 = Params(name='laplacian',
                             assignable_names=['lap', 'laplacian'],
                             kinects=['K1'],
                             kernel_func_mkl_rgb=lambda X, L=None: pairwise.laplacian_kernel(X, L, gamma=0.0001),
                             kernel_func_mkl_of=lambda X, L=None: pairwise.laplacian_kernel(X, L, gamma=0.0001),
                             kernel_func_mkl_depth=lambda X, L=None: pairwise.laplacian_kernel(X, L, gamma=0.0001),
                             kernel_func_concatenate=lambda X, L=None: pairwise.laplacian_kernel(X, L, gamma=0.001),
                             kernel_func_svm_rgb=lambda X, L=None: pairwise.laplacian_kernel(X, L, gamma=0.00001),
                             kernel_func_svm_depth=lambda X, L=None: pairwise.laplacian_kernel(X, L, gamma=0.00001),
                             C_mkl=100,
                             C_concatenate=100,
                             C_rgb=100,
                             C_of=100,
                             C_depth=100,
                             lam_mkl=0.8,
                             )
laplacian_params_K2 = Params(name='laplacian',
                             assignable_names=['lap', 'laplacian'],
                             kinects=['K2'],
                             kernel_func_mkl_rgb=lambda X, L=None: pairwise.laplacian_kernel(X, L, gamma=0.00001),
                             kernel_func_mkl_of=lambda X, L=None: pairwise.laplacian_kernel(X, L, gamma=0.00001),
                             kernel_func_mkl_depth=lambda X, L=None: pairwise.laplacian_kernel(X, L, gamma=0.00001),
                             kernel_func_concatenate=lambda X, L=None: pairwise.laplacian_kernel(X, L, gamma=0.001),
                             kernel_func_svm_rgb=lambda X, L=None: pairwise.laplacian_kernel(X, L, gamma=0.00001),
                             kernel_func_svm_depth=lambda X, L=None: pairwise.laplacian_kernel(X, L, gamma=0.00001),
                             C_mkl=100,
                             C_concatenate=100,
                             C_rgb=100,
                             C_of=100,
                             C_depth=100,
                             lam_mkl=0.0,
                             )
laplacian_params_K3 = Params(name='laplacian',
                             assignable_names=['lap', 'laplacian'],
                             kinects=['K3'],
                             kernel_func_mkl_rgb=lambda X, L=None: pairwise.laplacian_kernel(X, L, gamma=0.00001),
                             kernel_func_mkl_of=lambda X, L=None: pairwise.laplacian_kernel(X, L, gamma=0.00001),
                             kernel_func_mkl_depth=lambda X, L=None: pairwise.laplacian_kernel(X, L, gamma=0.00001),
                             kernel_func_concatenate=lambda X, L=None: pairwise.laplacian_kernel(X, L, gamma=0.001),
                             kernel_func_svm_rgb=lambda X, L=None: pairwise.laplacian_kernel(X, L, gamma=0.00001),
                             kernel_func_svm_depth=lambda X, L=None: pairwise.laplacian_kernel(X, L, gamma=0.00001),
                             C_mkl=100,
                             C_concatenate=100,
                             C_rgb=100,
                             C_of=100,
                             C_depth=100,
                             lam_mkl=0.0,
                             )
laplacian_params_K4 = Params(name='laplacian',
                             assignable_names=['lap', 'laplacian'],
                             kinects=['K4'],
                             kernel_func_mkl_rgb=lambda X, L=None: pairwise.laplacian_kernel(X, L, gamma=0.0001),
                             kernel_func_mkl_of=lambda X, L=None: pairwise.laplacian_kernel(X, L, gamma=0.0001),
                             kernel_func_mkl_depth=lambda X, L=None: pairwise.laplacian_kernel(X, L, gamma=0.00001),
                             kernel_func_concatenate=lambda X, L=None: pairwise.laplacian_kernel(X, L, gamma=0.01),
                             kernel_func_svm_rgb=lambda X, L=None: pairwise.laplacian_kernel(X, L, gamma=0.00001),
                             kernel_func_svm_depth=lambda X, L=None: pairwise.laplacian_kernel(X, L, gamma=0.00001),
                             C_mkl=100,
                             C_concatenate=100,
                             C_rgb=100,
                             C_of=100,
                             C_depth=100,
                             lam_mkl=0.5,
                             )
laplacian_params_K5 = Params(name='laplacian',
                             assignable_names=['lap', 'laplacian'],
                             kinects=['K5'],
                             kernel_func_mkl_rgb=lambda X, L=None: pairwise.laplacian_kernel(X, L, gamma=0.00001),
                             kernel_func_mkl_of=lambda X, L=None: pairwise.laplacian_kernel(X, L, gamma=0.00001),
                             kernel_func_mkl_depth=lambda X, L=None: pairwise.laplacian_kernel(X, L, gamma=0.00001),
                             kernel_func_concatenate=lambda X, L=None: pairwise.laplacian_kernel(X, L, gamma=0.001),
                             kernel_func_svm_rgb=lambda X, L=None: pairwise.laplacian_kernel(X, L, gamma=0.00001),
                             kernel_func_svm_depth=lambda X, L=None: pairwise.laplacian_kernel(X, L, gamma=0.00001),
                             C_mkl=1000,
                             C_concatenate=100,
                             C_rgb=100,
                             C_of=100,
                             C_depth=100,
                             lam_mkl=1.,
                             )
